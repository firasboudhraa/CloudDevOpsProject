pipeline {
    agent any

    tools {
      nodejs 'nodejs-22-16-0' 
    }

    options {
      timestamps() 
    }

    environment {
      DOCKER_PASSWORD = vault path: 'secret/data/ci/dockerhub', key: 'password', credentialsId: 'vault-jenkins-token'
      SONAR_TOKEN     = vault path: 'secret/data/ci/sonar',     key: 'token',    credentialsId: 'vault-jenkins-token'
      GIT_USERNAME    = vault path: 'secret/data/ci/github',    key: 'username', credentialsId: 'vault-jenkins-token'
      GIT_TOKEN       = vault path: 'secret/data/ci/github',    key: 'token',    credentialsId: 'vault-jenkins-token'
      SLACK_URL       = vault path: 'secret/data/ci/slack',     key: 'webhook',  credentialsId: 'vault-jenkins-token'
      ARGOCD_PASSWORD = vault path: 'secret/data/ci/argocd', key: 'admin_password', credentialsId: 'vault-jenkins-token'

      DOCKERHUB_USERNAME = 'firasboudhraa'
      DOCKERHUB_REPO     = 'node-app'
      APP_DIR            = 'App'
      IMAGE_NAME         = "${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}:latest"
    }

    stages {
      stage('Checkout code') {
        steps {
          git branch: 'main', url: 'https://github.com/firasboudhraa/CloudDevOpsProject.git'
        }
      }

    stage('Print Vault Secrets') {
      steps {
        echo "üîê DOCKER_PASSWORD = ${DOCKER_PASSWORD.take(5)}*****"
        echo "üîê SONAR_TOKEN = ${SONAR_TOKEN.take(5)}*****"
        echo "üîê GIT_USERNAME = ${GIT_USERNAME}"
        echo "üîê GIT_TOKEN = ${GIT_TOKEN.take(5)}*****"
        echo "üîê SLACK_URL = ${SLACK_URL.take(30)}..."
      }
    }

      stage('SonarQube Analysis') {
        steps {
          withCredentials([string(credentialsId: 'jenkins-sonarqube-token', variable: 'SONAR_TOKEN')]) {
            dir("${APP_DIR}") {
              sh '''
                echo "Running SonarQube scanner..."
                npx sonar-scanner -X \
                  -Dsonar.projectKey=express-app \
                  -Dsonar.sources=. \
                  -Dsonar.host.url=http://localhost:9000 \
                  -Dsonar.login=${SONAR_TOKEN}
              '''
            }
          }
        }
      }

      stage('Build Docker Image') {
        steps {
          sh "docker build -t ${IMAGE_NAME} ${APP_DIR}"
        }
      }

      stage('Trivy Scan') {
        steps {
          sh '''
            mkdir -p trivy-reports
            trivy image --severity HIGH,CRITICAL --no-progress \
              --format table \
              --output trivy-reports/express_app_report.txt \
              ${IMAGE_NAME}
            cat trivy-reports/express_app_report.txt
          '''
        }
      }

      stage('Push to DockerHub') {
        steps {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            sh '''
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              docker push ${IMAGE_NAME}
              docker logout
            '''
          }
        }
      }

        stage('Update ArgoCD Manifest') {
          steps {
            withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]) {
              sh """
                git config user.email "jenkins@theteam.com.tn"
                git config user.name "Jenkins"
                git remote set-url origin https://\${GIT_USERNAME}:\${GIT_TOKEN}@github.com/firasboudhraa/CloudDevOpsProject.git
                sed -i 's|image: .*|image: ${IMAGE_NAME}|' ArgoCd/deployment.yml
                git add ArgoCd/deployment.yml
                git commit -m "Update image to ${IMAGE_NAME}" || echo "No changes to commit"
                git push origin main
              """
            }
          }
        }

      stage('Apply ArgoCD Application') {
        steps {
          sh '''
            echo "üì¶ Applying ArgoCD Application definition..."
            kubectl apply -f ArgoCd/node-app-application.yml -n argocd || true
          '''
        }
      }

      stage('Login to ArgoCD') {
        steps {
          sh '''
            echo "üîê Logging into ArgoCD..."
            ARGOCD_SERVER=localhost:32000
            ARGOCD_USERNAME=admin

            argocd login $ARGOCD_SERVER \
              --username $ARGOCD_USERNAME \
              --password $ARGOCD_PASSWORD \
              --insecure --grpc-web
          '''
        }
      }

      stage('Trigger ArgoCD Sync') {
        steps {
          sh '''
            argocd app sync  node-app --insecure --grpc-web || echo "ArgoCD sync failed"
          '''
        }
      }
    }

  post {
    success {
      withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
        sh '''
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚úÖ Jenkins Pipeline Succeeded: *CloudDevOpsProject*"}' \
          $SLACK_URL
        '''
      }
    }
    failure {
      withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
        sh '''
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚ùå Jenkins Pipeline *FAILED*: Please check the logs üìÑ"}' \
          $SLACK_URL
        '''
      }
    }
  }

  }
