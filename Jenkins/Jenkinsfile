pipeline {
    agent any

    tools {
      nodejs 'nodejs-22-16-0' 
    }

    options {
      timestamps() 
    }

    environment {
      DOCKERHUB_USERNAME = 'firasboudhraa'
      DOCKERHUB_REPO     = 'node-app'
      APP_DIR            = 'App'
      IMAGE_NAME         = "${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}:latest"
    }

    stages {
      stage('Checkout code') {
        steps {
          git branch: 'main', url: 'https://github.com/firasboudhraa/CloudDevOpsProject.git'
        }
      }

      stage('SonarQube Analysis') {
        steps {
          withCredentials([string(credentialsId: 'jenkins-sonarqube-token', variable: 'SONAR_TOKEN')]) {
            dir("${APP_DIR}") {
              sh '''
                echo "Running SonarQube scanner..."
                npx sonar-scanner -X \
                  -Dsonar.projectKey=express-app \
                  -Dsonar.sources=. \
                  -Dsonar.host.url=http://localhost:9000 \
                  -Dsonar.login=${SONAR_TOKEN}
              '''
            }
          }
        }
      }

      stage('Build Docker Image') {
        steps {
          sh "docker build -t ${IMAGE_NAME} ${APP_DIR}"
        }
      }

      stage('Trivy Scan') {
        steps {
          sh '''
            mkdir -p trivy-reports
            trivy image --severity HIGH,CRITICAL --no-progress \
              --format table \
              --output trivy-reports/express_app_report.txt \
              ${IMAGE_NAME}
            cat trivy-reports/express_app_report.txt
          '''
        }
      }

      stage('Push to DockerHub') {
        steps {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            sh '''
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              docker push ${IMAGE_NAME}
              docker logout
            '''
          }
        }
      }

      stage('Update ArgoCD Manifest') {
        steps {
          withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]) {
            sh '''
              git config user.email "jenkins@theteam.com.tn"
              git config user.name "Jenkins"

              git remote set-url origin https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/firasboudhraa/CloudDevOpsProject.git

              sed -i 's|image: .*$|image: ${IMAGE_NAME}|' ArgoCd/deployment.yaml

              git add ArgoCd/deployment.yaml
              git commit -m "Update image to ${IMAGE_NAME}" || echo "No changes to commit"
              git push origin main
            '''
          }
        }
      }


      stage('Trigger ArgoCD Sync') {
        steps {
          sh '''
            argocd app sync cloud-devops-app --insecure --grpc-web || echo "ArgoCD sync failed"
          '''
        }
      }
    }

    post {
        always {
            archiveArtifacts artifacts: 'trivy-reports/*.txt', fingerprint: true
        }
        success {
            sh '''
                curl -X POST -H 'Content-type: application/json' \
                --data '{"text":"‚úÖ Jenkins Pipeline Succeeded: *CloudDevOpsProject*"}' \
                https://hooks.slack.com/services/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
            '''
        }
        failure {
            sh '''
                curl -X POST -H 'Content-type: application/json' \
                --data '{"text":"‚ùå Jenkins Pipeline *FAILED*: Please check the logs üìÑ"}' \
                https://hooks.slack.com/services/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
            '''
        }
    }
  }
